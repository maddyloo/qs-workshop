AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template: Tableau Server Cluster running on Linux
  (CentOS/Ubuntu). (qs-1puphiigo)'
Metadata:
  AWSAMIRegionMap:
    Filters:
      TABCENTOS7HVM:
        name: CentOS Linux 7 x86_64 HVM EBS*
        owner-alias: aws-marketplace
        product-code: aw0evgkw8e5c1q413zgy5pjce
        product-code.type: marketplace
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AWS Environment and Machine Configuration
        Parameters:
          - VpcId
          - PrivateSubnetIds
          - PublicSubnetIds
          - InstanceType
          - WorkerCount
          - KeyPairName
          - AMIOS
          - SourceCIDR
          - ExistingSecurityGroup
          - IPAddress
      - Label:
          default: Server DNS configuration
        Parameters:
          - SSLCertificateARN
          - AWSPublicFQDN
          - AWSHostedZoneID
      - Label:
          default: Secrets
        Parameters:
          - Username
          - Password
          - TableauServerAdminUser
          - TableauServerAdminPassword
      - Label:
          default: Registration
        Parameters:
          - AcceptEULA
          - TableauServerLicenseKey
          - RegFirstName
          - RegLastName
          - RegEmail
          - RegCompany
          - RegTitle
          - RegDepartment
          - RegIndustry
          - RegPhone
          - RegCity
          - RegState
          - RegZip
          - RegCountry
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      AMIOS:
        default: AMI Operating System
      AWSHostedZoneID:
        default: DNS Zone ID
      AWSPublicFQDN:
        default: Full DNS Name for Cluster
      AcceptEULA:
        default: Accept Tableau End User License Agreement
      ExistingSecurityGroup:
        default: Existing Security Group
      IPAddress:
        default: EIP address for initial node
      InstanceType:
        default: Amazon EC2 instance type
      KeyPairName:
        default: Key Pair Name
      Password:
        default: Tableau Services Manager (TSM) administrator password
      PrivateSubnetIds:
        default: Target Private Subnets
      PublicSubnetIds:
        default: Target Public Subnets
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      RegCity:
        default: City
      RegCompany:
        default: Company
      RegCountry:
        default: Country
      RegDepartment:
        default: Department
      RegEmail:
        default: Email Address
      RegFirstName:
        default: First Name
      RegIndustry:
        default: Industry
      RegLastName:
        default: Last Name
      RegPhone:
        default: Phone
      RegState:
        default: State
      RegTitle:
        default: Title
      RegZip:
        default: Zip/Postal Code
      SSLCertificateARN:
        default: SSL Certificate ARN (Requires matching DNS name)
      SourceCIDR:
        default: Source CIDR for Access
      TableauServerAdminPassword:
        default: Tableau Server administrator password
      TableauServerAdminUser:
        default: Tableau Server administrator username
      TableauServerLicenseKey:
        default: Tableau Activation Key
      Username:
        default: Tableau Services Manager (TSM) administrator username
      VpcId:
        default: Target VPC
      WorkerCount:
        default: Number of additional Tableau Server instances
Parameters:
  AMIOS:
    AllowedValues:
      - CentOS-7-HVM
      - Ubuntu-Server-16.04-LTS-HVM
    Default: CentOS-7-HVM
    Description: The Linux distribution for the AMI to be used for the EC2 instances
    Type: String
  AWSHostedZoneID:
    Description: DNS Zone ID to contain the cluster's DNS entry (blank = no DNS)
    Type: String
  AWSPublicFQDN:
    Description: Tableau Server portal will be reachable at this address (blank =
      no DNS)
    Type: String
  AcceptEULA:
    AllowedPattern: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
    Description: 'View the EULA at the Link: https://www.tableau.com/eula'
    Type: String
  ExistingSecurityGroup:
    Description: Provide an existing security group or leave blank for creating a
      new one
    Type: String
  IPAddress:
    Description: Provide an Elastic IP address (EIP) for the initial node (blank =
      no EIP)
    Type: String
  InstanceType:
    AllowedValues:
      - m4.4xlarge
      - m4.10xlarge
      - m5.4xlarge
      - m5.12xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: m4.4xlarge
    Description: Amazon EC2 instance type
    Type: String
  KeyPairName:
    AllowedPattern: .+
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  Password:
    Description: Tableau Services Manager (TSM) administrator password
    MinLength: '6'
    NoEcho: 'true'
    Type: String
  PrivateSubnetIds:
    Description: The private subnets to use
    Type: List<AWS::EC2::Subnet::Id>
  PublicSubnetIds:
    Description: The public subnets to use
    Type: List<AWS::EC2::Subnet::Id>
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-tableau-server/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  RegCity:
    Description: City
    MinLength: '1'
    Type: String
  RegCompany:
    Description: Company
    MinLength: '1'
    Type: String
  RegCountry:
    Description: Country
    MinLength: '1'
    Type: String
  RegDepartment:
    Description: Department
    MinLength: '1'
    Type: String
  RegEmail:
    Description: Email
    MinLength: '1'
    Type: String
  RegFirstName:
    Description: First Name
    MinLength: '1'
    Type: String
  RegIndustry:
    Description: Industry
    MinLength: '1'
    Type: String
  RegLastName:
    Description: Last Name
    MinLength: '1'
    Type: String
  RegPhone:
    Description: Phone
    MinLength: '1'
    Type: String
  RegState:
    Description: State
    MinLength: '1'
    Type: String
  RegTitle:
    Description: Title
    MinLength: '1'
    Type: String
  RegZip:
    Description: ZIP/Postal Code
    MinLength: '1'
    Type: String
  SSLCertificateARN:
    Default: ''
    Description: The Amazon Resource Name for the existing SSL cert you wish to use;
      empty for none
    Type: String
  SourceCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: IP address/range to allow access from
    Type: String
  TableauServerAdminPassword:
    Description: The password of the initial administrator for Tableau Server
    MinLength: '1'
    NoEcho: 'true'
    Type: String
  TableauServerAdminUser:
    Description: The name of the initial administrator for Tableau Server
    MinLength: '1'
    Type: String
  TableauServerLicenseKey:
    Description: License Key
    MinLength: '1'
    Type: String
  Username:
    AllowedPattern: ^(?!(tableau|tsmagent|admin|root)$)[A-Za-z0-9]+$
    Description: Tableau Services Manager (TSM) administrator username (cannot be
      'tableau' or 'tsmagent' or 'admin' or 'root')
    MaxLength: '30'
    Type: String
  VpcId:
    Description: The ID of the VPC into which to deploy the cluster
    Type: AWS::EC2::VPC::Id
  WorkerCount:
    Default: '2'
    Description: Number of (additional) worker nodes
    MaxValue: '30'
    MinValue: '2'
    Type: Number
Mappings:
  AWSAMIRegionMap:
    AMI:
      TABCENTOS7HVM: CentOS Linux 7 x86_64 HVM EBS ENA 1901_01-0722b432-8459-49b6-9b90-79b42624d25d-ami-05713873c6794f575.4
      US1604HVM: ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20190628
    ap-northeast-1:
      TABCENTOS7HVM: ami-045f38c93733dd48d
      US1604HVM: ami-0f9af249e7fa6f61b
    ap-northeast-2:
      TABCENTOS7HVM: ami-06cf2a72dadf92410
      US1604HVM: ami-082bdb3b2d54d5a19
    ap-south-1:
      TABCENTOS7HVM: ami-02e60be79e78fef21
      US1604HVM: ami-0927ed83617754711
    ap-southeast-1:
      TABCENTOS7HVM: ami-0b4dd9d65556cac22
      US1604HVM: ami-0ee0b284267ea6cde
    ap-southeast-2:
      TABCENTOS7HVM: ami-08bd00d7713a39e7d
      US1604HVM: ami-0328aad0f6218c429
    ca-central-1:
      TABCENTOS7HVM: ami-033e6106180a626d0
      US1604HVM: ami-06a6f79d24f2b6a21
    eu-central-1:
      TABCENTOS7HVM: ami-04cf43aca3e6f3de3
      US1604HVM: ami-050a22b7e0cf85dd0
    eu-west-1:
      TABCENTOS7HVM: ami-0ff760d16d9497662
      US1604HVM: ami-03ef731cc103c9f09
    eu-west-2:
      TABCENTOS7HVM: ami-0eab3a90fc693af19
      US1604HVM: ami-0fab23d0250b9a47e
    sa-east-1:
      TABCENTOS7HVM: ami-0b8d86d4bf91850af
      US1604HVM: ami-02b235ae9b5819d3b
    us-east-1:
      TABCENTOS7HVM: ami-02eac2c0129f6376b
      US1604HVM: ami-04763b3055de4860b
    us-east-2:
      TABCENTOS7HVM: ami-0f2b4fc905b0bd1f1
      US1604HVM: ami-0d03add87774b12c5
    us-west-1:
      TABCENTOS7HVM: ami-074e2d6769f445be5
      US1604HVM: ami-0dbf5ea29a7fc7e05
    us-west-2:
      TABCENTOS7HVM: ami-01ed306a12b7d1c96
      US1604HVM: ami-0994c095691a46fb5
  LinuxAMINameMap:
    CentOS-7-HVM:
      Code: TABCENTOS7HVM
    Ubuntu-Server-16.04-LTS-HVM:
      Code: US1604HVM
  DefaultConfiguration:
    InstallationConfig:
      TableauServerInstallerOnCentos: https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-server.x86_64.rpm
      TableauServerInstallerOnUbuntu: https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-server_amd64.deb
      AutomatedInstaller: https://s3-us-west-2.amazonaws.com/tableau-quickstart/automated-installer
    MachineConfiguration:
      SystemVolumeSize: 100
Conditions:
  HasWorkers: !Not
    - !Equals
      - 0
      - !Ref 'WorkerCount'
  NoSSLCertficate: !Equals
    - ''
    - !Ref 'SSLCertificateARN'
  HasSSLCertificate: !Not
    - !Condition 'NoSSLCertficate'
  NoServerSecurityGroup: !Equals
    - ''
    - !Ref 'ExistingSecurityGroup'
  HasServerSecurityGroup: !Not
    - !Condition 'NoServerSecurityGroup'
  NoElasticIP: !Equals
    - ''
    - !Ref 'IPAddress'
  HasElasticIP: !Not
    - !Condition 'NoElasticIP'
  NoDNSEntry: !Or
    - !Equals
      - ''
      - !Ref 'AWSHostedZoneID'
    - !Equals
      - ''
      - !Ref 'AWSPublicFQDN'
  CreateDNSEntry: !Not
    - !Condition 'NoDNSEntry'
  IsCentos: !Equals
    - CentOS-7-HVM
    - !Ref 'AMIOS'
Resources:
  VpcInfo:
    Type: Custom::VpcInfo
    Properties:
      ServiceToken: !GetAtt 'InfoLambda.Arn'
      Region: !Ref 'AWS::Region'
      Func: DescribeVpc
      VpcId: !Ref 'VpcId'
  InfoLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
            var aws = require('aws-sdk');

            exports.handler = (e, c) => {
            	console.log('REQUEST RECEIVED:\n' + JSON.stringify(e));

            	// For Delete requests, immediately send a SUCCESS response.
            	if (e.RequestType == 'Delete') {
            		sendResponse(e, c, 'SUCCESS');
            		return;
            	}

            	var ec2 = new aws.EC2({ region: e.ResourceProperties.Region });
            	var vpc = e.ResourceProperties.VpcId;
            	var func = e.ResourceProperties.Func;

            	var status = 'FAILED';
            	var responseData = {};
            	if (func === 'DescribeVpc') {
            		// Get VPCs with the specified id
            		ec2.describeVpcs({ VpcIds: [vpc] }, (err, data) => {
            			console.log('vpcs:\n' + JSON.stringify(data));
            			err = err || (data.Vpcs.length !== 1 ? 'DescribeVpcs returned ' + data.Vpcs.length + ' results.' : undefined);
            			if (err) {
            				responseData.Error = 'DescribeVpcs call failed';
            				console.log(responseData.Error + ':\n', err);
            			} else {
            				status = 'SUCCESS';
            				responseData = data.Vpcs[0];
            			}
            			sendResponse(e, c, status, responseData);
            		});
            	} else {
            		sendResponse(e, c, status, {Error: 'Unknown Function ' + func});
            	}
            };

            // Send response to the pre-signed S3 URL
            function sendResponse(e, c, status, responseData) {
            	var responseBody = JSON.stringify({
            		Status: status,
            		Reason: 'See the details in CloudWatch Log Stream: ' + c.logStreamName,
            		PhysicalResourceId: c.logStreamName,
            		StackId: e.StackId,
            		RequestId: e.RequestId,
            		LogicalResourceId: e.LogicalResourceId,
            		Data: responseData
            	});

            	console.log('RESPONSE BODY:\n', responseBody);

            	var https = require('https');
            	var url = require('url');

            	var parsedUrl = url.parse(e.ResponseURL);
            	var options = {
            		hostname: parsedUrl.hostname,
            		port: 443,
            		path: parsedUrl.path,
            		method: 'PUT',
            		headers: {
            			'content-type': '',
            			'content-length': responseBody.length
            		}
            	};

            	console.log('SENDING RESPONSE...\n');

            	var request = https.request(options, (response) => {
            		console.log('STATUS: ' + response.statusCode);
            		console.log('HEADERS: ' + JSON.stringify(response.headers));
            		c.done(); // Tell AWS Lambda function execution is done
            	});

            	request.on('error', (err) => {
            		console.log('sendResponse Error:' + err);
            		c.done(); // Tell AWS Lambda function execution is done
            	});

            	// write data to request body
            	request.write(responseBody);
            	request.end();
      Handler: index.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: nodejs8.10
      Timeout: 30
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ec2:DescribeVpcs
                Resource: '*'
  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackResource
                  - cloudformation:SignalResource
                Resource: !Join
                  - ''
                  - - 'arn:aws:cloudformation:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - :stack/
                    - !Ref 'AWS::StackName'
                    - /*
              - Effect: Allow
                Action: ec2:DescribeInstances
                Resource: '*'
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'RootRole'
  WorkerWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: HasWorkers
    Properties: {}
  WorkerWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Condition: HasWorkers
    DependsOn: PrimaryServer
    Properties:
      Count: !Ref 'WorkerCount'
      Handle: !Ref 'WorkerWaitHandle'
      Timeout: '1200'
  TopologyWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: HasWorkers
    Properties: {}
  TopologyWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Condition: HasWorkers
    DependsOn: WorkerWaitCondition
    Properties:
      Count: 1
      Handle: !Ref 'TopologyWaitHandle'
      Timeout: '2100'
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Web traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !If
            - HasSSLCertificate
            - 443
            - 80
          ToPort: !If
            - HasSSLCertificate
            - 443
            - 80
          CidrIp: !Ref 'SourceCIDR'
      Tags:
        - Key: Name
          Value: LoadBalancerSecurityGroup
      VpcId: !Ref 'VpcId'
  ServerLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - LoadBalancerSecurityGroup
    Properties:
      Scheme: internet-facing
      Subnets: !Split
        - ','
        - !Join
          - ','
          - !Ref 'PublicSubnetIds'
      SecurityGroups:
        - !Ref 'LoadBalancerSecurityGroup'
      Listeners:
        - Protocol: !If
            - HasSSLCertificate
            - HTTPS
            - HTTP
          LoadBalancerPort: !If
            - HasSSLCertificate
            - 443
            - 80
          InstanceProtocol: HTTP
          InstancePort: 80
          SSLCertificateId: !If
            - HasSSLCertificate
            - !Ref 'SSLCertificateARN'
            - !Ref 'AWS::NoValue'
      Instances:
        - !Ref 'PrimaryServer'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cfn-lb'
  DNSNameEntry:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNSEntry
    DependsOn:
      - ServerLoadBalancer
    Properties:
      HostedZoneId: !Ref 'AWSHostedZoneID'
      Name: !Sub '${AWSPublicFQDN}.'
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt 'ServerLoadBalancer.CanonicalHostedZoneNameID'
        DNSName: !GetAtt 'ServerLoadBalancer.DNSName'
  PrimaryServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/secrets.properties:
              mode: '640'
              content:
                !Sub |
                  tsm_admin_user='${Username}'
                  tsm_admin_pass='${Password}'
                  tableau_server_admin_user='${TableauServerAdminUser}'
                  tableau_server_admin_pass='${TableauServerAdminPassword}'
            /tmp/tableau-server:
              source: !If
                - IsCentos
                - !FindInMap
                  - DefaultConfiguration
                  - InstallationConfig
                  - TableauServerInstallerOnCentos
                - !FindInMap
                  - DefaultConfiguration
                  - InstallationConfig
                  - TableauServerInstallerOnUbuntu
            /tmp/automated-installer:
              mode: '550'
              source: !FindInMap
                - DefaultConfiguration
                - InstallationConfig
                - AutomatedInstaller
            /tmp/workers.sh:
              mode: '550'
              content: !If
                - HasWorkers
                - !Sub |
                    #!/bin/bash -e
                    # Wait for workers
                    sleep 30
                    wait_json=$(aws cloudformation describe-stack-resource --stack-name "${AWS::StackName}" --region "${AWS::Region}" --logical-resource-id WorkerWaitCondition)
                    while [ $(echo $wait_json | jq -r '.StackResourceDetail.ResourceStatus') != 'CREATE_COMPLETE' ]; do
                        sleep 10
                        wait_json=$(aws cloudformation describe-stack-resource --stack-name "${AWS::StackName}" --region "${AWS::Region}" --logical-resource-id WorkerWaitCondition)
                    done
                    sleep 30
                    set_topology() {
                        source '/tmp/secrets.properties'
                        tsm topology list-nodes -u "$tsm_admin_user" -p "$tsm_admin_pass" | while read p; do
                            tsm topology set-process -n "$p" -pr clustercontroller -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                            tsm topology set-process -n "$p" -pr gateway -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                            tsm topology set-process -n "$p" -pr vizportal -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                            tsm topology set-process -n "$p" -pr vizqlserver -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                            tsm topology set-process -n "$p" -pr cacheserver -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                            tsm topology set-process -n "$p" -pr searchserver -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                            tsm topology set-process -n "$p" -pr backgrounder -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                            tsm topology set-process -n "$p" -pr dataserver -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                            tsm topology set-process -n "$p" -pr dataengine -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                            tsm topology set-process -n "$p" -pr filestore -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                        done
                        tsm topology set-process -n node2 -pr pgsql -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                        tsm pending-changes apply --ignore-prompt -iw -u "$tsm_admin_user" -p "$tsm_admin_pass"
                        tsm stop -u "$tsm_admin_user" -p "$tsm_admin_pass"
                        tsm topology deploy-coordination-service -n node1,node2,node3  -u "$tsm_admin_user" -p "$tsm_admin_pass"
                        sleep 120
                        tsm topology cleanup-coordination-service -u "$tsm_admin_user" -p "$tsm_admin_pass"
                        tsm start -u "$tsm_admin_user" -p "$tsm_admin_pass"
                    }
                    send_singal_to_topologyWaitHandle() {
                    # Signal successful completion
                    /opt/aws/bin/cfn-signal -e $? ${TopologyWaitHandle}
                    set_topology
                    unset -f set_topology
                    trap send_singal_to_topologyWaitHandle EXIT
                - '# No action needed'
            /tmp/config.json:
              content:
                !Sub |
                  {"configEntities": {
                      "gatewaySettings": {
                          "_type": "gatewaySettingsType",
                          "port": 80,
                          "firewallOpeningEnabled": true,
                          "sslRedirectEnabled": true,
                          "publicHost": "localhost",
                          "publicPort": 80
                      },
                      "identityStore": {
                          "_type": "identityStoreType",
                          "type": "local"
                      }
                  }}
            /tmp/registration.json:
              content:
                first_name: !Ref 'RegFirstName'
                last_name: !Ref 'RegLastName'
                email: !Ref 'RegEmail'
                company: !Sub '${RegCompany};AWSQuickStart-Linux'
                title: !Ref 'RegTitle'
                department: !Ref 'RegDepartment'
                industry: !Ref 'RegIndustry'
                phone: !Ref 'RegPhone'
                city: !Ref 'RegCity'
                state: !Ref 'RegState'
                zip: !Ref 'RegZip'
                country: !Ref 'RegCountry'
    Properties:
      SubnetId: !Select
        - '0'
        - !Ref 'PrivateSubnetIds'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - !FindInMap
          - LinuxAMINameMap
          - !Ref 'AMIOS'
          - Code
      InstanceType: !Ref 'InstanceType'
      SecurityGroupIds: !If
        - HasServerSecurityGroup
        - - !Ref 'ExistingSecurityGroup'
        - - !Ref 'ServerSecurityGroup'
      KeyName: !Ref 'KeyPairName'
      IamInstanceProfile: !Ref 'RootInstanceProfile'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: !FindInMap
              - DefaultConfiguration
              - MachineConfiguration
              - SystemVolumeSize
      EbsOptimized: true
      UserData: !Base64
        Fn::Sub: |
            #!/bin/bash -x
            if [[ $(ls /etc/*-release) ]]; then
                OS=$( cat /etc/*-release \
                | grep ^ID= |awk -F= '{print $2}'\
                | tr -cd [:alpha:])
            else
                return 1
            fi
            if [ "$OS" == "ubuntu" ]; then
                apt-get update
                apt-get install -y python-setuptools

                wget https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-postgresql-odbc_9.5.3_amd64.deb
                dpkg -i tableau-postgresql-odbc_9.5.3_amd64.deb
                apt-get install awscli -y
                apt-get install jq -y
                apt-get install expect -y
            else
                rpm -i https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-postgresql-odbc-9.5.3-1.x86_64.rpm
                yum install epel-release -y
                yum install awscli -y
                yum install jq -y
                yum install expect -y
            fi
            # Call Init
            /usr/bin/easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource PrimaryServer  --region ${AWS::Region}
            # Various machine configs
            hostnamectl set-hostname $(hostnamectl --static)
            setup_sftp() {
                source '/tmp/secrets.properties'
                useradd -m "$tsm_admin_user"
                echo -e "$tsm_admin_pass\n$tsm_admin_pass" | passwd "$tsm_admin_user"

                mkdir /restricted
                chown root:root /restricted
                chmod 551 /restricted
                sed -i.bak -e 's:Subsystem\s\+sftp\s\+/usr/libexec/openssh/sftp-server:Subsystem sftp  internal-sftp:' /etc/ssh/sshd_config
                printf "\nMatch User $tsm_admin_user\n  ForceCommand internal-sftp\n  ChrootDirectory /restricted\n  PasswordAuthentication yes\n  AllowTcpForwarding no\n  PermitTunnel no\n  X11Forwarding no\n" >>/etc/ssh/sshd_config
                service sshd restart
            }
            setup_sftp
            unset -f setup_sftp
            if [ "$OS" == "ubuntu" ]; then
                export LANG=en_US.UTF-8
                mv /tmp/tableau-server /tmp/tableau-server.deb
            else
                mv /tmp/tableau-server /tmp/tableau-server.rpm
            fi
            # Install Tableau Server
            install() {
                source '/tmp/secrets.properties'
                local license='${TableauServerLicenseKey}'
                local license=$([ "$license" == '' ] && echo '' || echo "-k '$license'")
                /tmp/automated-installer -a $tsm_admin_user -f /tmp/config.json -r /tmp/registration.json -s /tmp/secrets.properties $license -v --accepteula --force /tmp/tableau-server*
                source /etc/profile.d/tableau_server.sh
                tsm topology nodes get-bootstrap-file --file bootstrap.cfg -u "$tsm_admin_user" -p "$tsm_admin_pass"
            }
            install
            unset -f install
            # publish the Primary xml
            mv bootstrap.cfg /restricted/
            # Signal successful completion
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource PrimaryServer --region ${AWS::Region}
            # Wait for workers
            /tmp/workers.sh
            # Cleanup
            rm -f /tmp/config.json
            rm -f /tmp/registration.json
            rm -f /tmp/secrets.properties
            rm -f /tmp/workers.sh
            rm -f /tmp/tableau-server*
            rm -f /tmp/automated-installer
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cfn-primary-tableau-server-linux'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Condition: HasElasticIP
    Properties:
      InstanceId: !Ref 'PrimaryServer'
      EIP: !Ref 'IPAddress'
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: NoServerSecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: !Sub 'Enable HTTP access via ports 80 and HTTPS access on
        port 8850, and SSH access from the provided network CIDR, plus all access
        from within the VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref 'SourceCIDR'
        - IpProtocol: tcp
          FromPort: '8850'
          ToPort: '8850'
          CidrIp: !Ref 'SourceCIDR'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'SourceCIDR'
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: !GetAtt 'VpcInfo.CidrBlock'
  WorkerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Split
        - ','
        - !Join
          - ','
          - - !Select
              - '1'
              - !Ref 'PrivateSubnetIds'
            - !Select
              - '2'
              - !Ref 'PrivateSubnetIds'
      LaunchConfigurationName: !Ref 'WorkerLaunchConfig'
      MinSize: !Ref 'WorkerCount'
      MaxSize: !Ref 'WorkerCount'
      LoadBalancerNames:
        - !Ref 'ServerLoadBalancer'
  WorkerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/tableau-server:
              source: !If
                - IsCentos
                - !FindInMap
                  - DefaultConfiguration
                  - InstallationConfig
                  - TableauServerInstallerOnCentos
                - !FindInMap
                  - DefaultConfiguration
                  - InstallationConfig
                  - TableauServerInstallerOnUbuntu
            /tmp/automated-installer:
              mode: '550'
              source: !FindInMap
                - DefaultConfiguration
                - InstallationConfig
                - AutomatedInstaller
            /tmp/secrets.properties:
              mode: '640'
              content:
                !Sub |
                  tsm_admin_user='${Username}'
                  tsm_admin_pass='${Password}'
                  tableau_server_admin_user='${TableauServerAdminUser}'
                  tableau_server_admin_pass='${TableauServerAdminPassword}'
    Properties:
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - !FindInMap
          - LinuxAMINameMap
          - !Ref 'AMIOS'
          - Code
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: !If
        - HasServerSecurityGroup
        - - !Ref 'ExistingSecurityGroup'
        - - !Ref 'ServerSecurityGroup'
      KeyName: !Ref 'KeyPairName'
      IamInstanceProfile: !Ref 'RootInstanceProfile'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: !FindInMap
              - DefaultConfiguration
              - MachineConfiguration
              - SystemVolumeSize
      EbsOptimized: true
      UserData: !Base64
        Fn::Sub: |
            #!/bin/bash -x
            if [[ $(ls /etc/*-release) ]]; then
                OS=$( cat /etc/*-release \
                | grep ^ID= |awk -F= '{print $2}'\
                | tr -cd [:alpha:])
            else
                return 1
            fi
            if [ "$OS" == "ubuntu" ]; then
                apt-get update
                apt-get install -y python-setuptools

                wget https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-postgresql-odbc_9.5.3_amd64.deb
                dpkg -i tableau-postgresql-odbc_9.5.3_amd64.deb
                apt-get install awscli -y
                apt-get install jq -y
                apt-get install expect -y
            else
                rpm -i https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-postgresql-odbc-9.5.3-1.x86_64.rpm
                yum install epel-release -y
                yum install awscli -y
                yum install jq -y
                yum install expect -y
            fi
            # Call Init
            /usr/bin/easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource WorkerLaunchConfig  --region ${AWS::Region}
            # Various machine configs
            hostnamectl set-hostname $(hostnamectl --static)
            # Wait for Primary (use a random sleep to split up the requests and avoid throttling)
            sleep $(($(expr $RANDOM % 30) * 3))
            primary_json=$(aws cloudformation describe-stack-resource --stack-name ${AWS::StackName} --region ${AWS::Region} --logical-resource-id PrimaryServer)
            while [ $(echo $primary_json | jq -r '.StackResourceDetail.ResourceStatus') != 'CREATE_COMPLETE' ]; do
                sleep 30
                primary_json=$(aws cloudformation describe-stack-resource --stack-name ${AWS::StackName} --region ${AWS::Region} --logical-resource-id PrimaryServer)
            done
            primary_id=$(echo $primary_json | jq -r '.StackResourceDetail.PhysicalResourceId')
            primary_config=$(aws ec2 describe-instances --instance-id "$primary_id" --region ${AWS::Region} | jq -r '.Reservations[0].Instances[0]')
            primary_dns=$(echo $primary_config | jq -r '.PrivateDnsName')
            transfer() {
                source '/tmp/secrets.properties'
                expect -c "spawn sftp -o \"StrictHostKeyChecking no\" \"$tsm_admin_user@$primary_dns\";expect \"password:\";send \"$tsm_admin_pass\n\";expect \"sftp>\";send \"get bootstrap.cfg\n\";expect \"sftp>\";send \"exit\n\";interact"
            }
            transfer
            unset -f transfer
            if [ "$OS" == "ubuntu" ]; then
                export LANG=en_US.UTF-8
                mv /tmp/tableau-server /tmp/tableau-server.deb
            else
                mv /tmp/tableau-server /tmp/tableau-server.rpm
            fi
            # Install Tableau Server
            install() {
                source '/tmp/secrets.properties'
                useradd -m "$tsm_admin_user"
                echo -e "$tsm_admin_pass\n$tsm_admin_pass" | passwd "$tsm_admin_user"
                /tmp/automated-installer -a $tsm_admin_user -f /dev/zero -r /dev/zero -s /tmp/secrets.properties -b bootstrap.cfg -v --accepteula --force /tmp/tableau-server*
            }
            install
            unset -f install
            # Signal successful completion
            {'Fn::Sub': "/opt/aws/bin/cfn-signal -e $? '${WorkerWaitHandle}'"}
            # Cleanup
            rm -f /tmp/secrets.properties
            rm -f /tmp/tableau-server*
            rm -f /tmp/automated-installer
Outputs:
  LoadBalancerDNSName:
    Description: Direct DNS name of load balancer
    Value: !GetAtt 'ServerLoadBalancer.DNSName'
  PrimaryServer:
    Description: Primary server address
    Value: !GetAtt 'PrimaryServer.PublicDnsName'
  TableauServerURL:
    Description: Public DNS name to reach cluster
    Value: !Join
      - ''
      - - !If
          - HasSSLCertificate
          - https://
          - http://
        - !If
          - CreateDNSEntry
          - !Ref 'AWSPublicFQDN'
          - !GetAtt 'ServerLoadBalancer.DNSName'
        - /
  SecurityGroup:
    Description: The security group the instances belong to
    Value: !Ref 'ServerSecurityGroup'
